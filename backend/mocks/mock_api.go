// Code generated by MockGen. DO NOT EDIT.
// Source: backend/weatherapi (interfaces: WeatherApi)

// Package mocks is a generated GoMock package.
package mocks

import (
	shared "backend/shared"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWeatherApi is a mock of WeatherApi interface.
type MockWeatherApi struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherApiMockRecorder
}

// MockWeatherApiMockRecorder is the mock recorder for MockWeatherApi.
type MockWeatherApiMockRecorder struct {
	mock *MockWeatherApi
}

// NewMockWeatherApi creates a new mock instance.
func NewMockWeatherApi(ctrl *gomock.Controller) *MockWeatherApi {
	mock := &MockWeatherApi{ctrl: ctrl}
	mock.recorder = &MockWeatherApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherApi) EXPECT() *MockWeatherApiMockRecorder {
	return m.recorder
}

// QueryPoints mocks base method.
func (m *MockWeatherApi) QueryPoints(arg0 []*shared.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryPoints", arg0)
}

// QueryPoints indicates an expected call of QueryPoints.
func (mr *MockWeatherApiMockRecorder) QueryPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPoints", reflect.TypeOf((*MockWeatherApi)(nil).QueryPoints), arg0)
}
